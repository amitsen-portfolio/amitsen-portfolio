# ci.yml
# GitHub Actions Workflow
# This workflow handles the Continuous Integration and Deployment process

name: CI/CD Pipeline for My Portfolio Website

# Defines when the workflow will run
on:
  push:
    branches:
      - master
      - feature-*
  pull_request:
    branches:
      - master
      - feature-*
  workflow_dispatch:

# Defines the jobs in the workflow
jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Specifies the runner environment to use (Ubuntu latest version)

    steps:
    # Step 1: Checkout the repository
    # This action checks out your repository to the GitHub Actions runner,
    # allowing the workflow to access the contents of your repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up Node.js environment
    # This action sets up a Node.js environment for the workflow,
    # using the version specified under 'node-version'
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'  # Specify your Node.js version here (match with your local dev environment)

    # Step 3: Install dependencies
    # This step runs 'npm install' to install all dependencies specified in your package.json file
    - name: Install dependencies
      run: npm install

    # Step 4: Build the project
    # Here, we build the Next.js application by running the 'build' script defined in package.json
    - name: Build
      run: npm run build

    # Step 5: Run tests (Optional)
    # If you have tests set up, this step will run them. Uncomment this step if needed.
    # This step runs 'npm test', which should be configured in your package.json
    #- name: Run tests
    #  run: npm test

    # This step adds the hosting server's SSH key to the known hosts file
    # It ensures the GitHub Actions runner recognizes and trusts the hosting server during SSH connections
    # Create the .ssh directory in the GitHub Actions runner environment
    # Append the IONOS SSH key from GitHub Secrets to the known hosts
    # The IONOS_SSH_KEY secret should contain the SSH key for the IONOS server
    - name: Add HOST SSH Key to Known Hosts
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.IONOS_SSH_KEY }}" >> ~/.ssh/known_hosts


    # Deployment Step (Placeholder)
    # Include your deployment script here. This part should contain commands to deploy your app
    # to your hosting provider. Make sure to use GitHub Secrets for sensitive data.
    - name: Deploy to host server
      env:
        SERVER: ${{ secrets.HOST_SERVER }}
        USERNAME: ${{ secrets.HOST_USERNAME }}
        PASSWORD: ${{ secrets.HOST_PASSWORD }}
        LOCALDIR: ${{ secrets.APP_LOCALDIR }}
        REMOTEDIR: ${{ secrets.HOST_REMOTEDIR }}
      run: bash deploy.sh
