# ci.yml
# GitHub Actions Workflow
# This workflow handles the Continuous Integration and Deployment process

name: CI/CD Pipeline for My Portfolio Website

# Defines when the workflow will run
on:
  push:
    branches:
      - version-1
  pull_request:
    branches:
      - version-1
  workflow_dispatch:

# Defines the jobs in the workflow
jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Specifies the runner environment to use (Ubuntu latest version)

    environment: production
    env:
        NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ vars.EMAILJS_PUBLIC_KEY }}
        NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ vars.EMAILJS_SERVICE_ID }}
        NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ vars.EMAILJS_TEMPLATE_ID }}

    steps:
    # Step : Checkout the repository
    # This action checks out your repository to the GitHub Actions runner,
    # allowing the workflow to access the contents of your repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step: Set up Node.js environment
    # This action sets up a Node.js environment for the workflow,
    # using the version specified under 'node-version'
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.10.0'  # Specify your Node.js version here (match with your local dev environment)

    # Step: Cache Node.js Modules
    # This step caches the `node_modules` and Next.js build cache directories to speed up future builds.
    # The cache is keyed on the OS, the contents of `package-lock.json`, and all JavaScript/TypeScript source files.
    # This means the cache will only be used if these files haven't changed.
    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ${{ github.workspace }}/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

    # Step: Install dependencies
    # This step runs 'npm install' to install all dependencies specified in your package.json file
    - name: Install dependencies
      run: npm install

    # Step: Build the project
    # Here, we build the Next.js application by running the 'build' script defined in package.json
    - name: Build
      env:
        NEXT_PUBLIC_EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
        NEXT_PUBLIC_EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        NEXT_PUBLIC_EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
      run: npm run build

    # Step: Run tests (Optional)
    # If you have tests set up, this step will run them. Uncomment this step if needed.
    # This step runs 'npm test', which should be configured in your package.json
    #- name: Run tests
    #  run: npm test

    # This step adds the hosting server's SSH key to the known hosts file
    # It ensures the GitHub Actions runner recognizes and trusts the hosting server during SSH connections
    # Create the .ssh directory if it doesn't exist
    # Change the file permissions of the .ssh directory
    # Add the hosting server's SSH key to the known hosts
    # Optional: Change the file permissions of the known_hosts file
    - name: Add HOST SSH Key to Known Hosts
      if: github.event_name == 'push' && github.ref == 'refs/heads/version-1'
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -H ${{ secrets.HOST_SERVER }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    # This step installs sshpass in the GitHub Actions runner
    # sshpass is used for non-interactive ssh login, facilitating automation
    - name: Install sshpass
      if: github.event_name == 'push' && github.ref == 'refs/heads/version-1'
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass

    # Deployment Step (Placeholder)
    # Include your deployment script here. This part should contain commands to deploy your app
    # to your hosting provider. Make sure to use GitHub Secrets for sensitive data.
    - name: Deploy to host server
      if: github.event_name == 'push' && github.ref == 'refs/heads/version-1'
      env:
        SERVER: ${{ secrets.HOST_SERVER }}
        USERNAME: ${{ secrets.HOST_USERNAME }}
        PASSWORD: ${{ secrets.HOST_PASSWORD }}
        LOCALDIR: 'out'
        REMOTEDIR: ${{ secrets.HOST_REMOTEDIR }}
      run: bash deploy.sh
